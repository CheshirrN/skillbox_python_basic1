"""
Задача 3. Аналог Steam
Что нужно сделать

Вы пишете программу-инсталлятор для компьютерной игры. Пока инсталлятор скачивает обновление,
для пользователя необходимо отображать количество скачанных процентов, чтобы он понимал, успеет ли заварить чай,
прежде чем завершится процесс. Каждое обновление игры требует разного количества мегабайт, при этом у разных
игроков разная скорость интернет-соединения.

Напишите программу, принимающую на вход размер файла обновления в мегабайтах и скорость интернет-соединения
в мегабайтах в секунду. Для каждой секунды программа должна рассчитывать и выводить на экран процент скачанного
объёма до тех пор, пока скачивание не завершится. В конце программа должна показать,
сколько секунд заняло скачивание обновления. Обеспечьте контроль ввода.

Пример:

Укажите размер файла для скачивания: 123

Какова скорость вашего соединения: 27

Прошло 1 сек. Скачано 27 из 123 Мб (22%)

Прошло 2 сек. Скачано 54 из 123 Мб (44%)

Прошло 3 сек. Скачано 81 из 123 Мб (66%)

Прошло 4 сек. Скачано 108 из 123 Мб (88%)

Прошло 5 сек. Скачано 123 из 123 Мб (100%)
"""
import time  # Импортируем модуль time для использования задержки

sec = 0  # Инициализируем переменную sec (счетчик времени)
download = 0  # Инициализируем переменную download (счетчик скачанных данных)


# Функция для вывода сообщения об ошибке ввода
def error() -> None:
    print('Некорректный ввод!')


# Вход в бесконечный цикл для получения корректных данных от пользователя
while True:
    try:
        size = float(input('Укажите размер файла для скачивания: '))  # Запрашиваем размер файла
        speed = float(input('Какова скорость вашего соединения? '))  # Запрашиваем скорость соединения
        if speed <= 0 or size <= 0:
            print('Указан неверный размер файла или скорость! Повторите ввод!')
        else:
            break  # Если ввод корректен, выходим из цикла
    except ValueError:
        error()  # Если ввод некорректен, выводим сообщение об ошибке

# Бесконечный цикл для отображения прогресса скачивания
while True:
    sec += 1  # Увеличиваем счетчик времени на 1 секунду
    download += speed  # Увеличиваем счетчик скачанных данных на скорость соединения

    if size > download:
        time.sleep(1)  # Задержка в 1 секунду для отображения прогресса
        print(f'Прошло {sec} сек. Скачано {round(download)} из {size} Мб ({round(download * 100 / size)}%)')
    else:
        time.sleep(1)  # Задержка в 1 секунду для окончания работы
        print(f'Прошло {sec} сек. Скачано {size} из {size} Мб (100%)')
        break  # Если скачивание завершено, выходим из цикла
